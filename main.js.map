{"mappings":"AAOE,yDAAyD;AACzD,SAAS,sCAAmB,GAAW;IACrC,MAAM,OAAO,aAAa,OAAO,CAAC;IAClC,IAAI,MACF,OAAO,KAAK,KAAK,CAAC;IAEpB,OAAO;AACT;AAEA,wDAAwD;AACxD,SAAS,kCAAY,OAAiB;IACpC,aAAa,OAAO,CAAC,WAAW,KAAK,SAAS,CAAC;AACjD;AAEA,kGAAkG;AAClG,SAAS;IACP,MAAM,UAAU,sCAA0B,cAAc,EAAE;IAC1D,MAAM,iBAAiB,SAAS,cAAc,CAAC;IAC/C,IAAI,gBAAgB;QAClB,eAAe,SAAS,GAAG,IAAI,4BAA4B;QAC3D,QAAQ,OAAO,CAAC,CAAA;YACd,MAAM,YAAY,SAAS,aAAa,CAAC;YACzC,UAAU,EAAE,GAAG,OAAO,IAAI,EAAE,2BAA2B;YACvD,UAAU,SAAS,GAAG,CAAC;;2CAEY,EAAE,OAAO,IAAI,CAAC;0CACf,EAAE,OAAO,IAAI,CAAC;8CACV,EAAE,OAAO,WAAW,CAAC;mDAChB,EAAE,OAAO,GAAG,CAAC,kBAAkB,EAAE,OAAO,GAAG,CAAC;;QAEvF,CAAC;YACD,eAAe,WAAW,CAAC,YAAY,4CAA4C;QACrF;IACF;AACF;AAEA,mEAAmE;AACnE,SAAS;IACP,aAAa,UAAU,CAAC;IACxB;AACF;AAEA,sCAAsC;AACtC,SAAS;IACN,SAAS,cAAc,CAAC,QAA6B,KAAK,GAAG;IAC7D,SAAS,cAAc,CAAC,QAA6B,KAAK,GAAG;IAC7D,SAAS,cAAc,CAAC,OAA4B,KAAK,GAAG;IAC5D,SAAS,cAAc,CAAC,eAAqC,KAAK,GAAG;AACxE;AAEA,mDAAmD;AACnD,SAAS;IAEP;IAEA,MAAM,eAAe,SAAS,cAAc,CAAC;IAC7C,aAAa,gBAAgB,CAAC,UAAU,CAAC;QACvC,MAAM,cAAc;QAEpB,MAAM,YAAoB;YACxB,MAAM,AAAC,SAAS,cAAc,CAAC,QAA6B,KAAK;YACjE,MAAM,AAAC,SAAS,cAAc,CAAC,QAA6B,KAAK;YACjE,KAAK,AAAC,SAAS,cAAc,CAAC,OAA4B,KAAK;YAC/D,aAAa,AAAC,SAAS,cAAc,CAAC,eAAqC,KAAK;QAClF;QAEA,MAAM,UAAU,sCAA0B,cAAc,EAAE;QAC1D,MAAM,sBAAsB,QAAQ,SAAS,CAAC,CAAA,SAAU,OAAO,IAAI,KAAK,UAAU,IAAI;QAEtF,wBAAwB;QACxB,IAAI,wBAAwB,IAAI;YAC9B,0BAA0B;YAC1B,MAAM,YAAY,QAAQ;YAC1B,IAAI,WACF,yDAAyD;YACzD,OAAO,CAAC,oBAAoB,GAAG;iBAE/B,oDAAoD;YACpD;QAEJ,OACE,2CAA2C;QAC3C,QAAQ,IAAI,CAAC;QAGf,gDAAgD;QAChD,kCAAY;QACZ;QACA;IACF;IAEA,MAAM,cAAc,SAAS,cAAc,CAAC;IAC5C,YAAY,gBAAgB,CAAC,SAAS;AACxC;AAEA,SAAS,gBAAgB,CAAC,oBAAoB","sources":["main.ts"],"sourcesContent":["interface Course {\r\n    name: string;\r\n    code: string;\r\n    progression: string;\r\n    url: string;\r\n  }\r\n  \r\n  // Generisk funktion för att ladda data från localStorage\r\n  function loadFromStorage<T>(key: string): T | null {\r\n    const data = localStorage.getItem(key);\r\n    if (data) {\r\n      return JSON.parse(data) as T;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Anpassad funktion för att spara kurser i localStorage\r\n  function saveCourses(courses: Course[]): any {\r\n    localStorage.setItem('courses', JSON.stringify(courses));\r\n  }\r\n  \r\n  // Funktionen printUserDetails uppdaterad för att använda den generiska funktionen loadFromStorage\r\n  function printUserDetails(): void {\r\n    const courses = loadFromStorage<Course[]>('courses') || [];\r\n    const userDetailsDiv = document.getElementById(\"courseDetails\");\r\n    if (userDetailsDiv) {\r\n      userDetailsDiv.innerHTML = ''; // Rensa befintligt innehåll\r\n      courses.forEach(course => {\r\n        const courseDiv = document.createElement('div');\r\n        courseDiv.id = course.code; // Sätter id till kurskoden\r\n        courseDiv.innerHTML = `\r\n          <ul>\r\n            <li><strong>Kursnamn:</strong> ${course.name}</li>\r\n            <li><strong>Kurskod:</strong> ${course.code}</li>\r\n            <li><strong>Progression:</strong> ${course.progression}</li>\r\n            <li><strong>Hemsida:</strong> <a href=\"${course.url}\" target=\"_blank\">${course.url}</a></li>\r\n          </ul>\r\n        `;\r\n        userDetailsDiv.appendChild(courseDiv); // Lägg till den nya div:en i userDetailsDiv\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Funktion för att rensa kurser från localStorage och uppdatera UI\r\n  function clearCourses(): void {\r\n    localStorage.removeItem(\"courses\");\r\n    printUserDetails();\r\n  }\r\n  \r\n  // Funktion för att rensa formulärfält\r\n  function clearFormFields(): void {\r\n    (document.getElementById(\"name\") as HTMLInputElement).value = \"\";\r\n    (document.getElementById(\"code\") as HTMLInputElement).value = \"\";\r\n    (document.getElementById(\"url\") as HTMLInputElement).value = \"\";\r\n    (document.getElementById(\"progression\") as HTMLSelectElement).value = \"A\";\r\n  }\r\n  \r\n  // Initieringsfunktion som sätter upp eventlyssnare\r\n  function initializeApp(): void {\r\n    \r\n    printUserDetails();\r\n  \r\n    const createButton = document.getElementById(\"courseForm\") as HTMLFormElement;\r\n    createButton.addEventListener(\"submit\", (event) => {\r\n      event.preventDefault();\r\n  \r\n      const newCourse: Course = {\r\n        name: (document.getElementById(\"name\") as HTMLInputElement).value,\r\n        code: (document.getElementById(\"code\") as HTMLInputElement).value,\r\n        url: (document.getElementById(\"url\") as HTMLInputElement).value,\r\n        progression: (document.getElementById(\"progression\") as HTMLSelectElement).value,\r\n      };\r\n  \r\n      const courses = loadFromStorage<Course[]>('courses') || [];\r\n      const existingCourseIndex = courses.findIndex(course => course.code === newCourse.code);\r\n  \r\n      // Om kursen redan finns\r\n      if (existingCourseIndex !== -1) {\r\n        // Visa en bekräftelseruta\r\n        const overwrite = confirm(\"En kurs med denna kod finns redan. Vill du skriva över den befintliga kursen?\");\r\n        if (overwrite) {\r\n          // Ersätt den befintliga kursen med den nya informationen\r\n          courses[existingCourseIndex] = newCourse;\r\n        } else {\r\n          // Avbryt operationen om användaren klickar \"Avbryt\"\r\n          return;\r\n        }\r\n      } else {\r\n        // Lägg till kursen om den inte redan finns\r\n        courses.push(newCourse);\r\n      }\r\n  \r\n      // Spara den uppdaterade listan och uppdatera UI\r\n      saveCourses(courses);\r\n      printUserDetails();\r\n      clearFormFields();\r\n    });\r\n  \r\n    const clearButton = document.getElementById(\"clearbutton\") as HTMLButtonElement;\r\n    clearButton.addEventListener(\"click\", clearCourses);\r\n  }\r\n  \r\n  document.addEventListener('DOMContentLoaded', initializeApp);\r\n    "],"names":[],"version":3,"file":"main.js.map"}